results1[i, 2] <- predict(model1, newdata = data.frame(x=1))
}
ggplot() +
geom_line(data = data, aes(x = x, y = f), color = "black") +
geom_point(data = results1, aes(x = x, y = f_pred), color="red", shape=2)
results20 <- data.frame(x = 1, f_pred = 0)
for (i in 1:500) {
x <- seq(-3, 2, by = 0.1)
f <- true_relationship(x)
temp_observations <- f + rnorm(length(x), mean=0, sd=15)
model20 <- lm(temp_observations ~ poly(x, 20))
results20[i, 1] <- 1
results20[i, 2] <- predict(model20, newdata = data.frame(x=1))
}
ggplot() +
geom_line(data = data, aes(x = x, y = f), color = "black") +
geom_point(data = results20, aes(x = x, y = f_pred), color="orange", shape=2)
models <- vector("list", 25)
for (degree in 1:25) {
model <- lm(observations ~ poly(x, degree))
models[[degree]] <- model
}
results <- data.frame(degree = 1:25, rmse = 0)
for (degree in 1:25) {
predictions <- predict(models[[degree]], newdata = data.frame(x=x))
results[results$degree==degree, "rmse"] <-
sqrt((1/length(predictions))*sum((predictions-observations)Ë†2))
knitr::opts_chunk$set(echo = TRUE)
models <- vector("list", 25)
for (degree in 1:25) {
model <- lm(observations ~ poly(x, degree))
models[[degree]] <- model
}
results <- data.frame(degree = 1:25, rmse = 0)
for (degree in 1:25) {
predictions <- predict(models[[degree]], newdata = data.frame(x=x))
results[results$degree==degree, "rmse"] <-
sqrt((1/length(predictions))*sum((predictions-observations)^2))
}
ggplot() +
geom_line(data = results, aes(x = degree, y = rmse), color = "black")
results <- data.frame(degree = 1:25, rmse = 0)
for (degree in 1:25) {
predictions <- predict(models[[degree]], newdata = data.frame(x=x))
results[results$degree==degree, "rmse"] <-
sqrt((1/length(predictions))*sum((predictions-observations_new)^2))
}
ggplot() +
geom_line(data = results, aes(x = degree, y = rmse), color = "black")
View(results20)
View(models)
knitr::opts_chunk$set(echo = TRUE)
model <- lm(observations ~ poly(x, 4))
predictions=predict(model, newdata = data.frame(x=x))
data = data.frame(x=x, f=f, predictions=predictions)
ggplot(data, aes(x=x)) +
geom_line(aes(y = f), color = "black") +
geom_line(aes(y = predictions), color = "red", linetype="solid")
library(keras)
library(reticulate)
library(tensorflow)
tensorflow::tf_config()
use_virtualenv("my_tf_workspace")
library(keras)
library(reticulate)
library(tensorflow)
use_virtualenv("my_tf_workspace")
tensorflow::tf_config()
full_dataset <- full_join(csv_list[[1]], csv_list[[2]], by="Tm")
library(tidyr)
library(dplyr)
library(forcats)
library(stringr)
library(ggplot2)
library(purrr)
dataset_folder <- paste(getwd(),"/cleaned_data",sep="")
all_csv <- list.files(path = dataset_folder, pattern = "\\.csv$", full.names = TRUE)
csv_list <- lapply(all_csv, read.csv)
names(csv_list) <- tools::file_path_sans_ext(basename(all_csv))
full_dataset <- full_join(csv_list[[1]], csv_list[[2]], by="Tm")
setwd("C:/Users/janna/Documents/Merrimack MSDS/team-beta")
dataset_folder <- paste(getwd(),"/cleaned_data",sep="")
all_csv <- list.files(path = dataset_folder, pattern = "\\.csv$", full.names = TRUE)
csv_list <- lapply(all_csv, read.csv)
names(csv_list) <- tools::file_path_sans_ext(basename(all_csv))
full_dataset <- full_join(csv_list[[1]], csv_list[[2]], by="Tm")
View(full_dataset)
nrow(csv_list[[1]])
nrow(csv_list[[2]])
full_dataset <- left_join(csv_list[[1]], csv_list[[2]], by="Tm")
full_dataset <- full_join(csv_list[[1]], csv_list[[2]], by=("Tm","Year"))
full_dataset <- full_join(csv_list[[1]], csv_list[[2]], by=c("Tm","Year"))
full_dataset <- csv_list %>% reduce(full_join, by =c("Tm","Year"))
View(full_dataset)
colnames(full_dataset)
dataset_folder <- paste(getwd(),"/cleaned_data",sep="")
all_csv <- list.files(path = dataset_folder, pattern = "\\.csv$", full.names = TRUE)
csv_list <- lapply(all_csv, read.csv(check.names = F))
csv_list <- lapply(all_csv, function(file) read.csv(file, check.names = FALSE))
library(tidyr)
library(dplyr)
library(stringr)
library(codebookr)
library(readr)
dataset_folder <- paste(getwd(),"/datasets",sep="")
all_csv <- list.files(path = dataset_folder, pattern = "\\.csv$", full.names = TRUE)
csv_list <- lapply(all_csv, function(file) read.csv(file, check.names = FALSE))
names(csv_list) <- tools::file_path_sans_ext(basename(all_csv))
################################## Functions ###################################
# Function to rename columns based on first row values
rename_columns <- function(df) {
cols_to_rename <- colnames(df)[colnames(df) != "Year"]  # Identify columns to rename
colnames(df)[colnames(df) != "Year"] <- as.character(df[1, cols_to_rename])  # Rename to first value in the column
# Handle NA or empty string column names
colnames(df)[is.na(colnames(df))] <- paste0("missing", which(is.na(colnames(df))))
colnames(df)[colnames(df) == ""] <- paste0("missing",which(colnames(df) == ""))
return(df[-1, ])  # Remove first row after renaming
}
drop_na_cols <- function(df) {
df <- df[, colSums(is.na(df)) < nrow(df)]
}
get_unique_columns <- function(df_list) {
# Extract column names from all dataframes and combine them into one vector
all_columns <- unlist(lapply(df_list, colnames))
# Get unique column names
unique_columns <- unique(all_columns)
return(unique_columns)
}
# Function to add missing columns to any dataframe in df_list
add_missing_columns <- function(df_list, columns_to_add) {
# Iterate through each dataframe in the list
df_list <- lapply(df_list, function(df) {
# Check for columns that are missing
missing_columns <- setdiff(columns_to_add, colnames(df))
# Add missing columns with NA values
for (col in missing_columns) {
df[[col]] <- NA  # You can change `NA` to any default value if needed
}
return(df)
})
return(df_list)
}
get_common_columns <- function(df_list) {
common_cols <- Reduce(intersect, lapply(df_list, colnames))
return(common_cols)
}
remove_non_observations <- function(df) {
bad_values <- c("Tm","","League Average")
df <- df %>%
filter(!(Tm %in% bad_values))
return(df)
}
################################################################################
current_csv <- csv_list[[1]]
# Find all indices where the first col = "Tm"
# Use this to split the csv file into different dataframes
tm_indices <- which(current_csv[[1]] == "Tm")
# Initialize a list to store the split dataframes
df_list <- list()
# Loop through "Tm" indices to extract dataframes for each season
for (i in seq_along(tm_indices)) {
start_idx <- tm_indices[i]  # Start from "Tm"
# Determine end index (either next "Tm" or end of dataframe)
end_idx <- ifelse(i < length(tm_indices), tm_indices[i + 1] - 1, nrow(current_csv))
# Extract the subset and store in list
df_list[[paste0("df_", i)]] <- current_csv[start_idx:end_idx, ]
}
# Filter out dataframes with less than 2 rows
# Column names are written again at the end of each season so this line removes those rows
df_list <- df_list[sapply(df_list, nrow) >= 2]
# Apply rename_columns function to every dataframe in the list
df_list <- lapply(df_list, rename_columns)
# Drop columns that have all NA values
df_list <- lapply(df_list, drop_na_cols)
# Get vector of all unique column names to pass through the add_missing_columns function
columns_to_add <- get_unique_columns(df_list)
# Apply the function to the list of dataframes
df_list <- add_missing_columns(df_list, columns_to_add)
# Get the common columns between all dataframes to use in full join
common_columns <- get_common_columns(df_list)
# Perform a full join on all dataframes based on the common columns
df_full_joined <- Reduce(function(x, y) full_join(x, y, by = common_columns), df_list)
df_full_joined <- remove_non_observations(df_full_joined)
csv_list[[1]] <- df_full_joined
write.csv(df_full_joined, file = paste(getwd(),"/cleaned_data/","cleaned_",names(csv_list)[1],".csv",sep = ""))
names(csv_list)[1]
################################################################################
current_csv <- csv_list[[2]]
# Find all indices where the first col = "Tm"
# Use this to split the csv file into different dataframes
tm_indices <- which(current_csv[[1]] == "Tm")
# Initialize a list to store the split dataframes
df_list <- list()
# Loop through "Tm" indices to extract dataframes for each season
for (i in seq_along(tm_indices)) {
start_idx <- tm_indices[i]  # Start from "Tm"
# Determine end index (either next "Tm" or end of dataframe)
end_idx <- ifelse(i < length(tm_indices), tm_indices[i + 1] - 1, nrow(current_csv))
# Extract the subset and store in list
df_list[[paste0("df_", i)]] <- current_csv[start_idx:end_idx, ]
}
# Filter out dataframes with less than 2 rows
# Column names are written again at the end of each season so this line removes those rows
df_list <- df_list[sapply(df_list, nrow) >= 2]
# Apply rename_columns function to every dataframe in the list
df_list <- lapply(df_list, rename_columns)
# Drop columns that have all NA values
df_list <- lapply(df_list, drop_na_cols)
# Get vector of all unique column names to pass through the add_missing_columns function
columns_to_add <- get_unique_columns(df_list)
# Apply the function to the list of dataframes
df_list <- add_missing_columns(df_list, columns_to_add)
# Get the common columns between all dataframes to use in full join
common_columns <- get_common_columns(df_list)
# Perform a full join on all dataframes based on the common columns
df_full_joined <- Reduce(function(x, y) full_join(x, y, by = common_columns), df_list)
df_full_joined <- remove_non_observations(df_full_joined)
csv_list[[2]] <- df_full_joined
write.csv(df_full_joined, file = paste(getwd(),"/cleaned_data/","cleaned_",names(csv_list)[2],".csv",sep = ""))
names(csv_list)[2]
################################################################################
for (i in 3:length(csv_list)) {
csv_list[[i]] <- remove_non_observations(csv_list[[i]])
write.csv(csv_list[[i]], file = paste(getwd(),"/cleaned_data/","cleaned_",names(csv_list)[i],".csv",sep = ""))
}
################################################################################
library(tidyr)
library(dplyr)
library(forcats)
library(stringr)
library(ggplot2)
library(purrr)
library(readr)
dataset_folder <- paste(getwd(),"/cleaned_data",sep="")
all_csv <- list.files(path = dataset_folder, pattern = "\\.csv$", full.names = TRUE)
csv_list <- lapply(all_csv, function(file) read.csv(file, check.names = FALSE))
names(csv_list) <- tools::file_path_sans_ext(basename(all_csv))
abbreviations <- c("ap","ap","tf","md","pvb","pvp","sbm","sb","sp")
for (i in 1:length(csv_list)) {
for (col in colnames(csv_list[[i]])) {
col <- paste(abbreviations[1],col,sep = ".")
}
}
abbreviations <- c("ab","ap","tf","md","pvb","pvp","sbm","sb","sp")
?rename
for (i in 1:length(csv_list)) {
for (col in colnames(csv_list[[i]])) {
rename(paste(abbreviations[i],col,sep = ".") <- col)
}
}
for (i in 1:length(csv_list)) {
working_csv <- csv_list[[i]]
for (col in colnames(working_csv)) {
new_col <- paste(abbreviations[i],col,sep = ".")
rename(working_csv, new_col = col)
}
}
for (i in 1:length(csv_list)) {
csv_list[[i]] <- csv_list[[i]] %>% select(!"")
}
for (i in 1:length(csv_list)) {
working_csv <- csv_list[[i]]
working_csv <- working_csv[,names(working_csv) != ""]
csv_list[[i]] <- working_csv
}
for (i in 1:length(csv_list)) {
working_csv <- csv_list[[i]]
for (col in colnames(working_csv)) {
new_col <- paste(abbreviations[i],col,sep = ".")
rename(working_csv, new_col = col)
}
}
for (i in 1:length(csv_list)) {
working_csv <- csv_list[[i]]
for (col in colnames(working_csv)) {
new_col <- paste(abbreviations[i],col,sep = ".")
rename(working_csv, new_col = col)
}
csv_list[[i]] <- working_csv
}
for (i in 1:length(csv_list)) {
working_csv <- csv_list[[i]]
for (col in colnames(working_csv)) {
new_col <- paste(abbreviations[i],col,sep = ".")
rename(working_csv, new_col = col)
}
head(working_csv)
csv_list[[i]] <- working_csv
}
for (i in 1:length(csv_list)) {
working_csv <- csv_list[[i]]
for (col in colnames(working_csv)) {
new_col <- paste(abbreviations[i],col,sep = ".")
rename(working_csv, new_col = col)
}
print(head(working_csv))
csv_list[[i]] <- working_csv
}
for (i in 1:length(csv_list)) {
working_csv <- csv_list[[i]]
for (col in colnames(working_csv)) {
new_col <- paste(abbreviations[i],col,sep = ".")
print(new_col)
rename(working_csv, new_col = col)
}
csv_list[[i]] <- working_csv
}
for (i in 1:length(csv_list)) {
working_csv <- csv_list[[i]]
for (col in colnames(working_csv)) {
new_col <- paste(abbreviations[i],col,sep = ".")
print(col)
rename(working_csv, new_col = col)
}
csv_list[[i]] <- working_csv
}
for (i in 1:length(csv_list)) {
working_csv <- csv_list[[i]]
for (col in colnames(working_csv)) {
new_col <- paste(abbreviations[i],col,sep = ".")
names(working_csv)[names(working_csv) == col] <- new_col
}
csv_list[[i]] <- working_csv
}
full_dataset <- csv_list %>% reduce(full_join, by =c("Tm","Year"))
dataset_folder <- paste(getwd(),"/cleaned_data",sep="")
all_csv <- list.files(path = dataset_folder, pattern = "\\.csv$", full.names = TRUE)
csv_list <- lapply(all_csv, function(file) read.csv(file, check.names = FALSE))
names(csv_list) <- tools::file_path_sans_ext(basename(all_csv))
# Remove index rows with no column name
for (i in 1:length(csv_list)) {
working_csv <- csv_list[[i]]
working_csv <- working_csv[,names(working_csv) != ""]
csv_list[[i]] <- working_csv
}
# Add abbreviation to columns in each csv
for (i in 1:length(csv_list)) {
working_csv <- csv_list[[i]]
for (col in colnames(working_csv)) {
# do not change the Tm and year columns so that full_join can be performed
if (col != "Tm" | col != "Year") {
new_col <- paste(abbreviations[i],col,sep = ".")
names(working_csv)[names(working_csv) == col] <- new_col
}
}
csv_list[[i]] <- working_csv
}
dataset_folder <- paste(getwd(),"/cleaned_data",sep="")
all_csv <- list.files(path = dataset_folder, pattern = "\\.csv$", full.names = TRUE)
csv_list <- lapply(all_csv, function(file) read.csv(file, check.names = FALSE))
names(csv_list) <- tools::file_path_sans_ext(basename(all_csv))
# Remove index rows with no column name
for (i in 1:length(csv_list)) {
working_csv <- csv_list[[i]]
working_csv <- working_csv[,names(working_csv) != ""]
csv_list[[i]] <- working_csv
}
# Add abbreviation to columns in each csv
for (i in 1:length(csv_list)) {
working_csv <- csv_list[[i]]
for (col in colnames(working_csv)) {
# do not change the Tm and year columns so that full_join can be performed
if (col != "Tm" & col != "Year") {
new_col <- paste(abbreviations[i],col,sep = ".")
names(working_csv)[names(working_csv) == col] <- new_col
}
}
csv_list[[i]] <- working_csv
}
full_dataset <- csv_list %>% reduce(full_join, by =c("Tm","Year"))
View(full_dataset)
colnames(full_dataset)
response_file <- paste(getwd(),"/datasets/Team Success Variable Data - Sheet1.csv")
working_csv <- working_csv[,names(working_csv) != ""]
response_file <- paste(getwd(),"/datasets/Team Success Variable Data - Sheet1.csv", sep="")
reponse_data <- read.csv(response_file)
View(reponse_data)
full_dataset <- full_join(full_dataset,response_data)
response_data <- read.csv(response_file)
full_dataset <- full_join(full_dataset,response_data)
write.csv(full_dataset, paste(dataset_folder,"/all_data.csv", sep=""))
library(tidyr)
library(dplyr)
library(forcats)
library(stringr)
library(ggplot2)
library(purrr)
library(readr)
dataset_folder <- paste(getwd(),"/cleaned_data",sep="")
all_csv <- list.files(path = dataset_folder, pattern = "\\.csv$", full.names = TRUE)
csv_list <- lapply(all_csv, function(file) read.csv(file, check.names = FALSE))
names(csv_list) <- tools::file_path_sans_ext(basename(all_csv))
###############################################################################
# create abbreviations for which csv file each column in full dataset came from
abbreviations <- c("ab","ap","tf","md","pvb","pvp","sbm","sb","sp")
# Remove index rows with no column name
for (i in 1:length(csv_list)) {
working_csv <- csv_list[[i]]
working_csv <- working_csv[,names(working_csv) != ""]
csv_list[[i]] <- working_csv
}
# Add abbreviation to columns in each csv
for (i in 1:length(csv_list)) {
working_csv <- csv_list[[i]]
for (col in colnames(working_csv)) {
# do not change the Tm and year columns so that full_join can be performed
if (col != "Tm" & col != "Year") {
new_col <- paste(abbreviations[i],col,sep = ".")
names(working_csv)[names(working_csv) == col] <- new_col
}
}
csv_list[[i]] <- working_csv
}
################################################################################
full_dataset <- csv_list %>% reduce(full_join, by =c("Tm","Year"))
response_file <- paste(getwd(),"/datasets/Team Success Variable Data - Sheet1.csv", sep="")
response_data <- read.csv(response_file)
full_dataset <- full_join(full_dataset,response_data, by=c("Tm", "Year"))
View(full_dataset)
full_dataset <- csv_list %>% reduce(full_join, by =c("Tm","Year"))
response_file <- paste(getwd(),"/datasets/Team Success Variable Data - Sheet1.csv", sep="")
response_data <- read.csv(response_file)
full_dataset <- full_join(full_dataset,response_data)
setwd("C:/Users/janna/Documents/Merrimack MSDS/team-beta")
data_file <- paste(dataset_folder,"/final_dataset.csv", sep = "")
dataset_folder <- paste(getwd(),"/final_data",sep="")
data_file <- paste(dataset_folder,"/final_dataset.csv", sep = "")
library(tidyr)
library(dplyr)
library(forcats)
library(stringr)
library(ggplot2)
library(purrr)
library(readr)
mlb_data <- read.csv(data_file)
View(mlb_data)
cor_matrix <- cor(df %>% select(where(is.numeric)), use = "complete.obs")
is.numeric(colnames(mlb_data))
?which()
mlb_data["ab.rOBA"]
mlb_data[["ab.rOBA"]]
numeric_cols <- sapply(mlb_data, is.numeric)
numeric_cols <- names(mlb_data)[sapply(mlb_data, is.numeric)]
cor_matrix <- cor(df %>% select(numeric_cols, use = "complete.obs")
cor_matrix <- cor(df %>% select(numeric_cols, use = "complete.obs"))
?cor
cor_matrix <- cor(mlb_data %>% select(numeric_cols, use = "complete.obs"))
cor_matrix <- cor(mlb_data %>% select(numeric_cols))
?corrplot
??corrplot
install.packages("corrplot")
library(corrplot)
corrplot::corrplot(cor_matrix, method = "color")
numeric_cols[1:20]
cor_matrix_20 <- cor(mlb_data %>% select(numeric_cols[1:20]))
corrplot::corrplot(cor_matrix_20, method = "color")
?cor_matrix
cor_matrix <- cor(mlb_data %>% select(numeric_cols), use = "pairwise.complete.obs")
?cor()
zero_sd_cols <- names(mlb_data)[sapply(mlb_data, function(x) sd(x, na.rm = T) == 0)]
zero_sd_cols <- names(mlb_data[,numeric_cols])[sapply(mlb_data[,numeric_cols], function(x) sd(x, na.rm = T) == 0)]
mlb_data$Year <- as.factor(mlb_data$Year)
mlb_data$Team.Success <- as.factor(mlb_data$Team.Success)
mlb_data <- read.csv(data_file, check.names = FALSE)
mlb_data$Year <- as.factor(mlb_data$Year)
mlb_data$Team.Success <- as.factor(mlb_data$Team.Success)
cor_matrix <- cor(mlb_data %>% select(numeric_cols), use = "pairwise.complete.obs")
numeric_cols <- names(mlb_data)[sapply(mlb_data, is.numeric)]
cor_matrix <- cor(mlb_data %>% select(numeric_cols), use = "pairwise.complete.obs")
zero_sd_cols <- names(mlb_data[,numeric_cols])[sapply(mlb_data[,numeric_cols], function(x) sd(x, na.rm = T) == 0)]
zero_sd_cols <- sapply(mlb_data, function(x) is.numeric(x) && sd(x, na.rm = TRUE) == 0)
names(mlb_data)[zero_sd_cols]
bad_cols <- sapply(df, function(x) is.numeric(x) && length(unique(na.omit(x))) <= 1)
names(df)[bad_cols]
cor_matrix <- cor(mlb_data %>% select(numeric_cols))
cor_matrix <- cor(mlb_data %>% select(numeric_cols), use = "pairwise.complete.obs"))
cor_matrix <- cor(mlb_data %>% select(numeric_cols), use = "pairwise.complete.obs")
apply(mlb_data[,numeric_cols], 2, function(x) sd(x, na.rm = TRUE))
col_sd <- apply(mlb_data[,numeric_cols], 2, function(x) sd(x, na.rm = TRUE))
View(data.frame(column = numeric_cols,
sd = col_sd))
cor_matrix <- cor(mlb_data %>% select(numeric_cols), use = "complete.obs")
cor_matrix <- cor(mlb_data %>% select(numeric_cols))
corrplot::corrplot(cor_matrix, method = "color", tl.cex = 0.6, order = "hclust")
cols_with_na <- names(mlb_data)[sapply(mlb_data, function(x) any(is.na(x)))]
cols_without_na <- names(mlb_data)[sapply(mlb_data, function(x) !any(is.na(x)))]
cor_data <- mlb_data %>% select(cols_without_na)
num_cor_cols <- names(cor_data)[sapply(cor_data, is.numeric)]
cor_matrix <- cor(cor_data %>% select(num_cor_cols))
cor_matrix <- cor(cor_data %>% select(all_of(num_cor_cols)), use = "pairwise.complete.obs")
corrplot::corrplot(cor_matrix, method = "color", tl.cex = 0.6, order = "hclust")
library(caret)
high_corr <- findCorrelation(cor_matrix, cutoff = 0.9, names = TRUE)
print(high_corr)
high_corr <- findCorrelation(cor_matrix, cutoff = 0.8, names = TRUE)
print(high_corr)
install.packages("ggcorrplot")
# create heat map of correlation values with ggcorrplot
ggcorrplot(cor_matrix, hc.order = TRUE, type = "lower", lab = FALSE)
library(ggcorrplot)
# create heat map of correlation values with ggcorrplot
ggcorrplot(cor_matrix, hc.order = TRUE, type = "lower", lab = FALSE)
remove_high_corr <- cor_data[, !names(cor_data) %in% high_corr]
rhc_cor_matrix <- cor(cor_data %>% select(any_of(num_cor_cols)), use = "pairwise.complete.obs")
rhc_cor_matrix <- cor(remove_high_corr %>% select(any_of(num_cor_cols)),
use = "pairwise.complete.obs")
corrplot::corrplot(rhc_cor_matrix, method = "color", tl.cex = 0.6, order = "hclust")
?corplot()
?corrplot()
# create heatmap of correlation values with corrplot
corrplot::corrplot(cor_matrix, method = "color", tl.cex = 0.6, tl.pos = "n")
corrplot::corrplot(rhc_cor_matrix, method = "color", tl.cex = 0.6, tl.pos = "n")
